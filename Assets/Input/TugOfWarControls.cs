//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/TugOfWarControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TugOfWarControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TugOfWarControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TugOfWarControls"",
    ""maps"": [
        {
            ""name"": ""General_Controller"",
            ""id"": ""8532f50b-2ae6-4045-8c12-0235a58c64c8"",
            ""actions"": [
                {
                    ""name"": ""LeftStick"",
                    ""type"": ""Value"",
                    ""id"": ""a9beb59c-e406-4822-aecb-996a848bfeb9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""f9d5c7a0-3faa-4153-9e0f-d982372e5ed8"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""05aade6d-1f91-4efe-bd2f-ffdd962f5262"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""e74076da-16b9-4eea-9a60-6bd738fe5a7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""dd830a28-fcd4-4c2c-b482-c69db5e6ba12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""a5ca780c-80c9-4754-95ca-7426c6be2800"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""06617fc2-e333-4a87-a574-720fa5f70d48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""dfe8c0de-dfc4-4e15-9bce-77aa8aa2c947"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""72dcf4ae-55d2-4dbe-a2be-61e07b18e0eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""c8d84435-cf9e-4f76-b43a-31e5e31006a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""f7b9bcdb-4760-4d88-b677-c95d9f71570b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftBumper"",
                    ""type"": ""Button"",
                    ""id"": ""159ae0aa-595a-4ac7-adce-b733212d9473"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightBumper"",
                    ""type"": ""Button"",
                    ""id"": ""7da388f2-5d43-4cbb-93f9-1b782091d974"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c7789912-cc47-4d39-9f58-a2e2f62d6e15"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97b95f16-cdc6-4501-a695-9979a7ab53d4"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e54850e7-0072-4328-80a4-003b4f593e3c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3977b4dd-3769-42cc-a651-59b6a86a28a9"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ba62d04-9165-4325-b7ea-bcbe93240e99"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2cfafb2e-fddf-4849-8980-3f0f54702edd"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e511e3c9-87a7-4e82-a7e1-743785f1fad5"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff974c94-ecd2-4d15-844c-e4ddab6ab771"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""733cdc93-accc-4395-b91b-d2c4db83f387"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""088793e0-cc3d-495f-8147-d2e7da3eee14"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd38bb64-6094-4a62-968c-099548e96b8d"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f214e34-7cf8-4b45-86d6-3eac07664eb9"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftBumper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b3eb4c5-244d-4d08-b2a4-9a97dc7df863"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightBumper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // General_Controller
        m_General_Controller = asset.FindActionMap("General_Controller", throwIfNotFound: true);
        m_General_Controller_LeftStick = m_General_Controller.FindAction("LeftStick", throwIfNotFound: true);
        m_General_Controller_LeftTrigger = m_General_Controller.FindAction("LeftTrigger", throwIfNotFound: true);
        m_General_Controller_RightTrigger = m_General_Controller.FindAction("RightTrigger", throwIfNotFound: true);
        m_General_Controller_A = m_General_Controller.FindAction("A", throwIfNotFound: true);
        m_General_Controller_B = m_General_Controller.FindAction("B", throwIfNotFound: true);
        m_General_Controller_X = m_General_Controller.FindAction("X", throwIfNotFound: true);
        m_General_Controller_Y = m_General_Controller.FindAction("Y", throwIfNotFound: true);
        m_General_Controller_Up = m_General_Controller.FindAction("Up", throwIfNotFound: true);
        m_General_Controller_Down = m_General_Controller.FindAction("Down", throwIfNotFound: true);
        m_General_Controller_Left = m_General_Controller.FindAction("Left", throwIfNotFound: true);
        m_General_Controller_Right = m_General_Controller.FindAction("Right", throwIfNotFound: true);
        m_General_Controller_LeftBumper = m_General_Controller.FindAction("LeftBumper", throwIfNotFound: true);
        m_General_Controller_RightBumper = m_General_Controller.FindAction("RightBumper", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // General_Controller
    private readonly InputActionMap m_General_Controller;
    private List<IGeneral_ControllerActions> m_General_ControllerActionsCallbackInterfaces = new List<IGeneral_ControllerActions>();
    private readonly InputAction m_General_Controller_LeftStick;
    private readonly InputAction m_General_Controller_LeftTrigger;
    private readonly InputAction m_General_Controller_RightTrigger;
    private readonly InputAction m_General_Controller_A;
    private readonly InputAction m_General_Controller_B;
    private readonly InputAction m_General_Controller_X;
    private readonly InputAction m_General_Controller_Y;
    private readonly InputAction m_General_Controller_Up;
    private readonly InputAction m_General_Controller_Down;
    private readonly InputAction m_General_Controller_Left;
    private readonly InputAction m_General_Controller_Right;
    private readonly InputAction m_General_Controller_LeftBumper;
    private readonly InputAction m_General_Controller_RightBumper;
    public struct General_ControllerActions
    {
        private @TugOfWarControls m_Wrapper;
        public General_ControllerActions(@TugOfWarControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftStick => m_Wrapper.m_General_Controller_LeftStick;
        public InputAction @LeftTrigger => m_Wrapper.m_General_Controller_LeftTrigger;
        public InputAction @RightTrigger => m_Wrapper.m_General_Controller_RightTrigger;
        public InputAction @A => m_Wrapper.m_General_Controller_A;
        public InputAction @B => m_Wrapper.m_General_Controller_B;
        public InputAction @X => m_Wrapper.m_General_Controller_X;
        public InputAction @Y => m_Wrapper.m_General_Controller_Y;
        public InputAction @Up => m_Wrapper.m_General_Controller_Up;
        public InputAction @Down => m_Wrapper.m_General_Controller_Down;
        public InputAction @Left => m_Wrapper.m_General_Controller_Left;
        public InputAction @Right => m_Wrapper.m_General_Controller_Right;
        public InputAction @LeftBumper => m_Wrapper.m_General_Controller_LeftBumper;
        public InputAction @RightBumper => m_Wrapper.m_General_Controller_RightBumper;
        public InputActionMap Get() { return m_Wrapper.m_General_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(General_ControllerActions set) { return set.Get(); }
        public void AddCallbacks(IGeneral_ControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_General_ControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_General_ControllerActionsCallbackInterfaces.Add(instance);
            @LeftStick.started += instance.OnLeftStick;
            @LeftStick.performed += instance.OnLeftStick;
            @LeftStick.canceled += instance.OnLeftStick;
            @LeftTrigger.started += instance.OnLeftTrigger;
            @LeftTrigger.performed += instance.OnLeftTrigger;
            @LeftTrigger.canceled += instance.OnLeftTrigger;
            @RightTrigger.started += instance.OnRightTrigger;
            @RightTrigger.performed += instance.OnRightTrigger;
            @RightTrigger.canceled += instance.OnRightTrigger;
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @B.started += instance.OnB;
            @B.performed += instance.OnB;
            @B.canceled += instance.OnB;
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @Y.started += instance.OnY;
            @Y.performed += instance.OnY;
            @Y.canceled += instance.OnY;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @LeftBumper.started += instance.OnLeftBumper;
            @LeftBumper.performed += instance.OnLeftBumper;
            @LeftBumper.canceled += instance.OnLeftBumper;
            @RightBumper.started += instance.OnRightBumper;
            @RightBumper.performed += instance.OnRightBumper;
            @RightBumper.canceled += instance.OnRightBumper;
        }

        private void UnregisterCallbacks(IGeneral_ControllerActions instance)
        {
            @LeftStick.started -= instance.OnLeftStick;
            @LeftStick.performed -= instance.OnLeftStick;
            @LeftStick.canceled -= instance.OnLeftStick;
            @LeftTrigger.started -= instance.OnLeftTrigger;
            @LeftTrigger.performed -= instance.OnLeftTrigger;
            @LeftTrigger.canceled -= instance.OnLeftTrigger;
            @RightTrigger.started -= instance.OnRightTrigger;
            @RightTrigger.performed -= instance.OnRightTrigger;
            @RightTrigger.canceled -= instance.OnRightTrigger;
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @B.started -= instance.OnB;
            @B.performed -= instance.OnB;
            @B.canceled -= instance.OnB;
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @Y.started -= instance.OnY;
            @Y.performed -= instance.OnY;
            @Y.canceled -= instance.OnY;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @LeftBumper.started -= instance.OnLeftBumper;
            @LeftBumper.performed -= instance.OnLeftBumper;
            @LeftBumper.canceled -= instance.OnLeftBumper;
            @RightBumper.started -= instance.OnRightBumper;
            @RightBumper.performed -= instance.OnRightBumper;
            @RightBumper.canceled -= instance.OnRightBumper;
        }

        public void RemoveCallbacks(IGeneral_ControllerActions instance)
        {
            if (m_Wrapper.m_General_ControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGeneral_ControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_General_ControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_General_ControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public General_ControllerActions @General_Controller => new General_ControllerActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IGeneral_ControllerActions
    {
        void OnLeftStick(InputAction.CallbackContext context);
        void OnLeftTrigger(InputAction.CallbackContext context);
        void OnRightTrigger(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnLeftBumper(InputAction.CallbackContext context);
        void OnRightBumper(InputAction.CallbackContext context);
    }
}
